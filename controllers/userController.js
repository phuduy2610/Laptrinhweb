const userModel = require('../models/userModel');
const cartModel = require('../models/CartModel');
const cloudinary = require('cloudinary').v2;
let Cart = require('../models/localCartModel');
const multer = require('multer');
const fs = require('fs');
const formidable = require('formidable');

exports.index = async (req, res, next) => {
    // Get user
    user = res.locals.user;
    // Get orders
    orders = await cartModel.listofcartssameuser(res.locals.user._id);
    //render
    for (i = 0; i < orders.length; i++) {
        let cart = new Cart(orders[i]);
        orders[i].items = cart.generateArray();
    }
    console.log('carts:', orders);
    res.render('user/user', { user, orders });
};

exports.edit = async (req, res, next) => {

    // let isImg = true;
    // let path_img;
    // let new_path;
    // let updated_user;
    // console.log(req.body);
    // const storage = multer.diskStorage({
    //     destination: function (req, file, cb) {
    //         console.log('something');
    //         cb(null, './public/images/')
    //     },
    //     filename: function (req, file, cb) {
    //         console.log('something123');
    //         cb(null, "user_avatar" + res.locals.user._id.toString() + path.extname(file.originalname));
    //         path_img = "user_avatar" + res.locals.user._id.toString() + path.extname(file.originalname);
    //         if (path.extname(file.originalname) != '.jpg' || path.extname(file.originalname) != '.png'
    //             || path.extname(file.originalname) != '.JPG' || path.extname(file.originalname) != '.PNG'
    //             || path.extname(file.originalname).size <= 0) {
    //             isImg = false;
    //         }
    //         updated_user = req.body;
    //     }
    // });
    // if (isImg) {
    //     const upload = multer({ storage });
    //     if (path_img)
    //         upload.single('coverImage')(req, res,async function (err) {
    //             if (err) {
    //                 console.log(err);
    //             }
    //             else {
    //                 new_path = __dirname + '/../public/images/' + path_img;
    //                 if(new_path){
    //                     await cloudinary.uploader.upload(new_path, { public_id: "user_avatar" + res.locals.user._id.toString(), folder: 'GameStore/Users', unique_filename: false, overwrite: true, "width": 265, "height": 265 })
    //                     .then(function (image) {
    //                         console.log("** File Upload (Promise)");
    //                         console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
    //                         console.log("* " + image.public_id);
    //                         console.log("* " + image.url);
    //                         updated_user.cover = image.url;
    //                         console.log("update_user",updated_user);
    //                     })
    //                     .catch(function (err) {
    //                         console.log();
    //                         console.log("*** File Upload (Promise)");
    //                         if (err) { console.warn(err); }
    //                     });
    //                 }
    //             }
    //         });
    // }
    // if (isImg) {
    //     await userModel.updateuserById(res.locals.user._id, { name: updated_user.name, birthday: updated_user.birthday, phone: updated_user.phone, email: updated_user.email, cover: updated_user.cover });
    // }
    // else {
    //     await userModel.updateuserById(res.locals.user._id, { name: updated_user.name, birthday: updated_user.birthday, phone: updated_user.phone, email: updated_user.email });
    // }

    // const user = await userModel.getUser(res.locals.user._id);
    // res.render('user/user', { user });













    const form = formidable({ multiples: true });
    let m_files;
    const formfields = await new Promise(function (resolve, reject) {
        form.parse(req, function (err, fields, files) {
            if (err) {
                reject(err);
                return;
            }
            console.log("within form.parse method, subject field of fields object is: " + fields);
            m_files = files;
            resolve(fields);
        }); // form.parse
    });

    const coverImage = m_files.coverImage;
    const imageName = formfields.name.replace(/ +/g, "") + "coverImg.jpg";

    if (coverImage && coverImage.size > 0) {
        const oldPath = coverImage.path;
        const newPath = __dirname + '/../public/images/' + imageName;
        const rawData = fs.readFileSync(oldPath);
        fs.writeFile(newPath, rawData, function (err) {
            if (err) console.log("write file error:", err)
        })
    }
    let flag = 0;
    console.log(__dirname + '/../public/images/' + imageName);
    if (coverImage && coverImage.size > 0) {
        await cloudinary.uploader.upload(__dirname + '/../public/images/' + imageName, { public_id: formfields.name.replace(/ +/g, "") + "coverImg", folder: 'GameStore/Users', unique_filename: false, overwrite: true, "width": 265, "height": 265 })
            .then(function (image) {
                console.log("** File Upload (Promise)");
                console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
                console.log("* " + image.public_id);
                console.log("* " + image.url);
                formfields.cover = image.url;
                console.log("*formfields", formfields);
                flag = 1;
            })
            .catch(function (err) {
                console.log();
                console.log("*** File Upload (Promise)");
                console.log("*formfields", formfields);
                flag = 1;
                if (err) { console.warn(err); }
            });
    }

    if (flag != 0) {
        await userModel.updateuserById(res.locals.user._id, { name: formfields.name, birthday: formfields.birthday, phone: formfields.phone, email: formfields.email, cover: formfields.cover });
    }
    else {
        await userModel.updateuserById(res.locals.user._id, { name: formfields.name, birthday: formfields.birthday, phone: formfields.phone, email: formfields.email });
    }

    const user = await userModel.getUser(res.locals.user._id);;
    res.render('user/user', { user });

};

